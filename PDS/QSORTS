QSORTS   TITLE '                        Q S O R T   A N D   Q S O R T L>
                  F U N C T I O N S'
***********************************************************************
*                                                                     *
* TITLE -- QSORT                                                      *
*                                                                     *
* FUNCTION / OPERATION -- THIS MODULE OPERATES AS A SHELL BETWEEN A   *
*   CALLING PROGRAM AND A COMPARE PROGRAM.  THE EFFECT OF THE SHELL   *
*   IS TO SORT DATA IN ASCENDING ORDER, DEPENDING ON THE RESULTS      *
*   RETURNED BY THE COMPARE PROGRAM                                   *
*                                                                     *
* STATUS / CHANGE LEVEL --                                            *
*   V1L2 -- SEP 2017                                                  *
*    - BC INSTRUCTIONS ALTERED TO BRC INSTRUCTIONS.                   *
*    - QSORTS CSECT DEFINED AS READ ONLY.                             *
*    - MINOR PERFORMANCE TWEAKING DONE.                               *
*    - VERSION MARKERS UPDATED.                                       *
*    - PAGE HEADER ALTERED TO REMOVE REFERENCE TO QUICKSORT.          *
*   V1L1 -- OCT 14, 1997                                              *
*     UPDATE QSORT TO DO NO PROCESSING IF N <= 1                      *
*   V1L0 -- FEB 28, 1993                                              *
*                                                                     *
* CALLING SEQUENCE --                                                 *
*                                                                     *
*          CALL QSORT,(BASE,N,WIDTH,COMPARE,WORK)                     *
*                                                                     *
*    BASE    -- THE FIRST ELEMENT IN AN ARRAY OF ELEMENTS TO SORT     *
*    COMPARE -- THE ADDRESS OF A ROUTINE USED TO COMPARE TWO ELEMENTS *
*               OF THE DATA AREA                                      *
*    N       -- A FULL WORD CONTAINING THE NUMBER OF ELEMENTS TO SORT *
*    WIDTH   -- A FULL WORD CONTAINING THE NUMBER OF BYTES IN EACH    *
*               ELEMENT.  THE MAXIMUM VALUE IS 256.                   *
*    WORK    -- A 100 BYTE DATA AREA USED AS A WORK AREA              *
*                                                                     *
*    COMPARE ROUTINE --                                               *
*      THE COMPARE ROUTINE IS CALLED WITH THIS CALLING SEQUENCE --    *
*                                                                     *
*               CALL COMPARE,(ELEMENT1,ELEMENT2)                      *
*                                                                     *
*      THE RETURN CODE IN REGISTER 15 EXPECTED FROM COMPARE IS --     *
*                                                                     *
*        ELEMENT1 < ELEMENT2 -- LESS THAN 0                           *
*        ELEMENT1 = ELEMENT2 -- 0                                     *
*        ELEMENT1 > ELEMENT2 -- GREATER THAN 0                        *
*                                                                     *
* ATTRIBUTES -- QSORT IS REENTRANT, REFRESHABLE AND RESUABLE.  IT     *
*   USES NO EXTERNAL SYSTEM RESOURCES.  IT OPERATES AMODE ANY,        *
*   RMODE ANY.  IT DOES NOT SUPPORT OPERATION IN AR MODE              *
*                                                                     *
***********************************************************************
         EJECT
         MACRO
         SETR
         LCLA  &A
.L       AIF   (&A GT 15).X
R&A      EQU   &A
&A       SETA  &A+1
         AGO   .L
.X       MEND
*        CALL  QSORT( BASE, NUM, WIDTH, COMPARE, WORK )
*
* THIS ROUTINE IS BASED ON THE FOLLOWING C PROGRAM
*
* VOID SORT( CHAR *ARRAY, INT N )
*  {
*   INT GAP, I, J, TEMP;
*
*   FOR ( GAP = N / 2; GAP > 0; GAP /= 2 )
*    FOR ( I = GAP; I < N; I++ )
*     FOR ( J = I - GAP;
*           J >= 0 && ARRAY(J) > ARRAY(J + GAP);
*           J -= GAP )
*      {
*       TEMP = ARRAY(J);
*       ARRAY(J) = ARRAY( J + GAP );
*       ARRAY( J + GAP ) = TEMP;
*      }
*  }
         SPACE 1
QSORTS   RSECT                     DEFINE PROGRAM CSECT            V1L2
         SPACE 1
QSORTS   AMODE ANY                 DEFINE AMODE
QSORTS   RMODE ANY                 DEFINE RMODE
         SPACE 1
         ENTRY QSORT,QSORTL
         SPACE 1
         SYSSTATE ARCHLVL=2                                        V1L2
         SR    R15,R15             SET R15 = 0
         BR    R14                 RETURN IF QSORTS CALLED
         SPACE 1
      DC    C'QSORT AND QSORTL ROUTINES -- V1L2 &SYSDATE &SYSTIME' V1L2
         DC    0D'0'
         SPACE 1
N        EQU   R3                  N
WIDTH    EQU   R4                  WIDTH
GAP      EQU   R6                  GAP
I        EQU   R7                  I
J        EQU   R8                  J
         SPACE 1
         USING *,R12               ESTABLISH ADDRESSABILITY
QSORT    SAVE  (14,12),,*          SAVE CALLER'S REGISTERS
         LR    R12,R15             COPY EP ADDRESS TO R12
         LM    R2,R6,0(R1)         LOAD THE REGISTERS
         ST    R6,8(,R13)          ADD THE NEW SAVE AREA TO THE
         ST    R13,4(,R6)           CALLER'S SAVE AREA CHAIN
         LR    R13,R6              ESTABLISH THE NEW SAVE AREA
         L     R3,0(,R3)           LOAD VALUE OF NUM
         CHI   R3,1                COMPARE VALUE W/ 1              V1L2
         JNH   QSO0600             BR IF 0 OR 1                    V1L2
         L     R4,0(,R4)           LOAD VALUE OF WIDTH
*   FOR ( GAP = N / 2; GAP > 0; GAP /= 2 )
         LR    GAP,N               COPY N TO GAP
         CNOP  0,8
QSO0100  SRA   GAP,1               DIVIDE N BY 2
*        LTR   GAP,GAP             TEST IF DONE (SRA SETS THE CC)  V1L2
         JZ    QSO0600             BR IF SO                        V1L2
*    FOR ( I = GAP; I < N; I++ )
         LR    I,GAP               COPY GAP TO I
QSO0200  CR    I,N                 COMPARE I AND N
         JNL   QSO0100             BR IF NOT A MATCH               V1L2
*     FOR ( J = I - GAP;
*           J >= 0 && ARRAY(J) > ARRAY(J + GAP);
*           J -= GAP )
         LR    J,I                 COPY I TO J
         SR    J,GAP               SUBTRACT GAP FROM I
QSO0300  LTR   J,J                 COMPARE J AND 0
         JL    QSO0500             BR IF DONE                      V1L2
         LR    R15,J               COPY J TO R15
         MR    R14,WIDTH           COMPUTE TRUE OFFSET
         LA    R9,0(R15,R2)        COMPUTE ADDRESS
         LR    R15,J               COPY J TO R15
         AR    R15,GAP             ADD GAP
         MR    R14,WIDTH           COMPUTE TRUE OFFSET
         LA    R10,0(R15,R2)       COMPUTE ADDRESS
         LR    R15,R5              COPY COMPARE ROUTINE ADDRESS TO R15
         CALL  (15),((R9),(R10)),MF=(E,72(,R13)) CALL THE COMPARE PGM
         LTR   R15,R15             TEST RC FROM COMPARE
         JNH   QSO0500             BR IF DONE                      V1L2
         LR    R1,WIDTH            COPY WIDTH TO R1
         BCTR  R1,0                REDUCE BY 1
         EX    R1,SWITCH1          EXCHANGE THE TWO ELEMENTS
         EX    R1,SWITCH2
         EX    R1,SWITCH1
QSO0400  SR    J,GAP               SUBTRACT GAP FROM J
         J     QSO0300             TEST IF FOR IS DONE             V1L2
         SPACE 1
QSO0500  LA    I,1(,I)             ADD 1 TO I
         J     QSO0200             TEST IF FOR IS DONE             V1L2
         SPACE 1
QSO0600  L     R13,4(,R13)         RESTORE ADDR OF CALLER'S SAVE AREA
         RETURN (14,12),T          RETURN TO CALLER
         SPACE 1
         CNOP  0,8
SWITCH1  XC    0(*-*,R9),0(R10)
SWITCH2  XC    0(*-*,R10),0(R9)
         SPACE 1
         CNOP  0,8
         LTORG ,
         EJECT
***********************************************************************
*                                                                     *
* TITLE -- QSORTL                                                     *
*                                                                     *
* FUNCTION / OPERATION -- QSORTL ACTS AS AN INTERFACE BETWEEN ANOTHER *
*   PROGRAM AND THE QSORT PROGRAM.  QSORTL SORTS A LIST OF ELEMENTS   *
*   THAT ARE ON A CHAIN.  IT DOES THIS BY RUNNING THE CHAIN TO        *
*   PRODUCE A POINTER LIST, THEN USES QSORT TO SORT THE POINTER LIST. *
*   AFTER QSORT TERMINATES THE CHAIN IS REBUILT IN SORTED ORDER BY    *
*   UPDATING THE POINTER ELEMENTS.                                    *
*                                                                     *
*                                                                     *
* STATUS / CHANGE LEVEL --                                            *
*   V1L1 -- APR 2016                                                  *
*    - ALLOCATE THE WORK AREA ABOVE THE LINE IF RUNNING AMODE 31      *
*   V1L0 -- MAR 31, 1993                                              *
*                                                                     *
* CALLING SEQUENCE --                                                 *
*   CALL QSORTL,(BASE,OFFSET,COMPARE)                                 *
*                                                                     *
*     BASE    -- ADDRESS OF A POINTER TO THE FIRST ELEMENT OF THE     *
*                CHAIN                                                *
*     OFFSET  -- OFFSET OF THE 4 BYTE POINTER TO THE NEXT ELEMENT     *
*                IN THE CHAIN.  A POINTER VALUE OF 0 INDICATES THE    *
*                LAST ELEMENT IN THE CHAIN.                           *
*     COMPARE -- COMPARE ROUTINE, AS USED BY QSORT.  THE COMPARE      *
*                ROUTINE SEES POINTERS TO THE DATA ELEMENT TO SORT.   *
*                                                                     *
* ATTRIBUTES -- QSORTL IS REENTRANT, REFRESHABLE AND REUSABLE.  IT    *
*   USES THE GETMAIN AND FREEMAIN SERVICE ROUTINE TO ALLOCATE AND     *
*   RELEASE STORAGE IN SUBPOOL 0.  IT OPERATES AMODE ANY, RMODE ANY.  *
*   AR MODE OPERATION IS NOT SUPPORT.                                 *
*                                                                     *
***********************************************************************
         CNOP  0,8
         SPACE 1
         USING *,R12               ESTABLISH PROGRAM ADDRESSABILITY
         USING QLWORK,R13          ESTABLISH WORK AREA ADDRESSABILITY
         SPACE 1
QSORTL   SAVE  (14,12),,*          SAVE REGISTERS
         LR    R12,R15             COPY EP ADDRESS TO R12
         LM    R2,R4,0(R1)         LOAD PARM LIST
         L     R3,0(,R3)           LOAD VALUE OF OFFSET
         SPACE 1
* COUNT THE NUMBER OF ELEMENTS ON THE CHAIN
         SPACE 1
         SR    R7,R7               SET COUNT = 0
         L     R6,0(,R2)           LOAD ADDRESS OF THE FIRST ELEMENT
QL0100   LTR   R6,R6               TEST IF END OF CHAIN
         JZ    QL0200              BR IF END                       V1L2
         L     R6,0(R3,R6)         LOAD ADDRESS OF THE NEXT ELEMENT
         LA    R7,1(,R7)           ADD 1 TO COUNT
         J     QL0100              AND CONTINUE                    V1L2
         SPACE 1
* MAKE SURE THE CHAIN IS WORTH SORTING
         SPACE 1
QL0200   C     R7,=F'1'            COMPARE COUNT WITH 1
         JNH   QL0800              EXIT IF COUNT <= 1              V1L2
         SPACE 1
* CALCULATE THE SIZE OF THE WORK AREA WE WILL ALLOCATE.  THE WORK
* AREA CONTAINS A FIXED BASE AREA FOLLOWED BY POINTER LIST WE PASS TO
* QSORT.
         SPACE 1
         LR    R6,R7               COPY COUNT TO R6
         SLL   R6,2                MULTIPLY COUNT BY 4
         LA    R6,QLWORKL+7(,R6)   COMPUTE TOTAL SIZE TO ALLOCATE
         SPACE 1
* ALLOCATE THE WORK AREA
         SPACE 1
         N     R6,=F'-8'           ROUND DOWN TO A DOUBLE WORD
         TAM   ,                   TEST THE ADDRESSING MODE
         JZ    QL0300              BR IF AMODE 24                  V1L2
         GETMAIN RU,LV=(R6),LOC=(31,ANY)  ALLOCATE THE WORK AREA
         J     QL0400                                              V1L2
QL0300   GETMAIN RU,LV=(R6),LOC=(24,ANY)  ALLOCATE THE WORK AREA
         SPACE 1
* ADD THE CHAIN AREA IN THE WORK AREA TO THE SAVE AREA CHAIN
         SPACE 1
QL0400   ST    R13,QLS-QLWORK+4(,R1) ADD THE SAVE AREA TO THE
         ST    R1,8(,R13)             SAVE AREA CHAIN
         LR    R13,R1              ESTABLISH A NEW SAVE AREA ADDRESS
         SPACE 1
* INITIALIZE ADDITIONAL DATA AREAS
         SPACE 1
         ST    R6,QLSSIZE          SAVE THE WORK AREA SIZE
         ST    R7,QLCOUNT          SAVE COUNT
         SPACE 1
* BUILD THE POINTER LIST
         SPACE 1
         LA    R1,QLPTRS           LOAD ADDR OF THE FIRST POINTER
         L     R6,0(,R2)           LOAD ADDRESS OF THE FIRST ELEMENT
QL0500   LTR   R6,R6               TEST IF END OF CHAIN
         JZ    QL0600              BR IF SO                        V1L2
         ST    R6,0(,R1)           SAVE ADDRESS
         LA    R1,4(,R1)           COMPUTE NEXT POINTER ADDRESS
         L     R6,0(R3,R6)         LOAD ADDRESS OF THE NEXT AREA
         J     QL0500                                              V1L2
         SPACE 1
* USE QSORT TO SORT THE POINTER LIST
         SPACE 1
QL0600   L     R15,=A(QSORT)       LOAD START OF QSORT
         CALL  (15),(QLPTRS,QLCOUNT,QLWIDTH,(R4),QLSWORK),MF=(E,QSPARM)
         SPACE 1
* REBUILD THE CHAIN IN SORTED ORDER USING THE POINTER LIST
         SPACE 1
         SR    R2,R3               MAKE POINTER TO 1ST ELEMENT A DUMMY ?
                                    ELEMENT
         LA    R1,QLPTRS           LOAD ADDRESS OF THE FIRST POINTER
QL0700   LA    R6,0(R3,R2)         COMPUTE ADDRESS OF POINTER TO       ?
                                    NEXT ELEMENT
         MVC   0(4,R6),0(R1)       COPY POINTER
         L     R2,0(,R1)           LOAD ADDRESS OF THE ELEMENT
         LA    R1,4(,R1)           COMPUTE NEXT POINTER ADDRESS
         BRCT  R7,QL0700           GO DO THE NEXT ELEMENT          V1L2
         LA    R6,0(R3,R2)         COMPUTE ADDRESS OF POINTER TO       ?
                                    NEXT ELEMENT
         XC    0(4,R6),0(R6)       CLEAR POINTER IN LAST ELEMENT
         SPACE 1
* RELEASE THE ALLOCATED STORAGE
         SPACE 1
         L     R0,QLSSIZE          LOAD SIZE OF ALLOCATED STORAGE
         LR    R1,R13              COPY ADDRESS TO R1
         L     R13,4(,R13)         LOAD ADDR OF THE CALLER'S SAVE AREA
         FREEMAIN RU,LV=(0),A=(1)  RELEASE STORAGE
         SPACE 1
* RETURN
         SPACE 1
QL0800   RETURN (14,12),T          RETURN TO CALLER
         SPACE 1
QLWIDTH  DC    F'4'                VALUE OF 4
         SPACE 1
         DC    0D'0'
         LTORG ,
         DC    0D'0'                                               V1L2
         SPACE 1
QLWORK   DSECT                     WORK AREA
QLS      DS    9D                  SAVE AREA
QLSWORK  DS    XL100               QSORT WORK AREA
QLSSIZE  DS    F                   SIZE OF THIS WORK AREA
QLCOUNT  DS    F                   NUMBER OF ELEMENTS
QSPARM   CALL  ,(*-*,*-*,*-*,*-*,*-*),MF=L QSORT PARM LIST
QLWORKL  EQU   *-QLWORK            LENGTH OF BASE PORTION
QLPTRS   DS    0A                  FIRST POINTER
         SETR  ,
         END   ,
